name: OKC Replicator for tekton files

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Target GitHub repository (e.g., org/abc-repo)'
        required: true
        type: string
      release_branch:
        description: 'Branch in target repo to merge PR into (e.g., rhoai-2.9)'
        required: true
        type: string
      version:
        description: 'New version identifier (e.g., v2.29.0)'
        required: true
        type: string
      okc_folder:
        description: 'Select folder inside OKC repo containing Tekton files'
        required: true
        type: choice
        options:
          - data-science-pipelines
          - odh-model-controller
          # Add all valid folder names here

jobs:
  create-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      

    steps:
      - name: Checkout OKC repository
        uses: actions/checkout@v4
        with:
          path: okc-repo

      - name: Generate github-app token
        id: app-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.PCAM_APP_ID }}
          private_key: ${{ secrets.PCAM_KEY }}
      
      - name: Prepare Tekton files
        run: |
          repo_folder="okc-repo/${{ inputs.okc_folder }}"
          echo "Using OKC folder: $repo_folder"
          if [ ! -d "$repo_folder/.tekton" ]; then
            echo "ERROR: $repo_folder/.tekton does not exist!"
            exit 1
          fi
          mkdir -p extracted/.tekton
          cp -r "$repo_folder/.tekton/"* extracted/.tekton/
          echo "Replacing output-image tag with version: ${{ inputs.version }}"
          find extracted/.tekton/ -type f -name "*.yaml" | while read file; do
            sed -i -E '/name: output-image/{n; s|(value: .+:)[^[:space:]]+|\1'"${{ inputs.version }}"'|}' "$file"
          done

      - name: Clone and push Tekton changes
        run: |
          git clone https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ inputs.repository }} repo-workspace
          cd repo-workspace
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          branch_name="tekton-update-${{ inputs.version }}"
          
          git fetch origin
          if git ls-remote --exit-code --heads origin "$branch_name" > /dev/null; then
            git checkout "$branch_name"
          else
            git checkout -b "$branch_name"
          fi
          
          mkdir -p .tekton
          rsync -av --delete ../extracted/.tekton/ .tekton/
          
          echo "Checking git status and diff:"
          git status
          git diff || true
          
          if git diff --quiet; then
            echo "No changes to commit."
            echo "commit=false" >> $GITHUB_ENV
            exit 0
          fi
          
          git add .tekton
          git commit -m "Update Tekton output-image tags to version ${{ inputs.version }}"
          git push --set-upstream origin "$branch_name"
          echo "commit=true" >> $GITHUB_ENV





      - name: Create Pull Request
        if: env.commit == 'true'   # Only run if there were changes committed and pushed
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          REPO: ${{ inputs.repository }}
          BASE: ${{ inputs.release_branch }}
          HEAD: tekton-update-${{ inputs.version }}
          VERSION: ${{ inputs.version }}
          OKC_FOLDER: ${{ inputs.okc_folder }}
        run: |
          gh pr create \
            --repo "$REPO" \
            --base "$BASE" \
            --head "$HEAD" \
            --title "Update Tekton files to version $VERSION" \
            --body "This PR updates the \`output-image\` tags in \`$OKC_FOLDER/.tekton/\` to version \`$VERSION\`."
